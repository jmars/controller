// Generated by IcedCoffeeScript 1.3.3f
var $, Base, Controller, Dust, EventEmitter2, ServerEvents, UUID, iced, require, _, __iced_k, __iced_k_noop,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

iced = {
  Deferrals: (function() {

    function _Class(_arg) {
      this.continuation = _arg;
      this.count = 1;
      this.ret = null;
    }

    _Class.prototype._fulfill = function() {
      if (!--this.count) return this.continuation(this.ret);
    };

    _Class.prototype.defer = function(defer_params) {
      var _this = this;
      ++this.count;
      return function() {
        var inner_params, _ref;
        inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (defer_params != null) {
          if ((_ref = defer_params.assign_fn) != null) {
            _ref.apply(null, inner_params);
          }
        }
        return _this._fulfill();
      };
    };

    return _Class;

  })(),
  findDeferral: function() {
    return null;
  }
};
__iced_k = __iced_k_noop = function() {};

Dust = require('dustjs');

$ = require('jquery');

_ = require('underscore');

EventEmitter2 = require('EventEmitter2').EventEmitter2;

require = require('require');

ServerEvents = require('sockevents');

Dust.onLoad = function(name, out) {
  var view, ___iced_passed_deferral, __iced_deferrals, __iced_k,
    _this = this;
  __iced_k = __iced_k_noop;
  ___iced_passed_deferral = iced.findDeferral(arguments);
  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      parent: ___iced_passed_deferral,
      filename: "src/index.iced",
      funcname: "onLoad"
    });
    require(["views/" + name], __iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          return view = arguments[0];
        };
      })(),
      lineno: 9
    }));
    __iced_deferrals._fulfill();
  })(function() {
    view(Dust);
    return out(null, Dust.cache[name]);
  });
};

UUID = function() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r, v;
    r = Math.random() * 16 | 0;
    v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

Base = Dust.makeBase({
  controllers: [],
  Controller: function(chunk, context, bodies, params) {
    return chunk.map(function(chunk) {
      var handler, uuid;
      if (!(typeof SERVER !== "undefined" && SERVER !== null)) {
        uuid = UUID();
        handler = function(data) {
          var Controller, ___iced_passed_deferral, __iced_deferrals, __iced_k,
            _this = this;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/index.iced",
              funcname: "handler"
            });
            require(["controllers/" + params.type], __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return Controller = arguments[0];
                };
              })(),
              lineno: 25
            }));
            __iced_deferrals._fulfill();
          })(function() {
            context.get('controllers').push(function() {
              var controller;
              controller = new Controller(uuid, params.type, ServerEvents, LocalEvents);
              controller.data = data;
              return controller.bind();
            });
            context = context.push(_(data).extend({
              id: uuid
            }));
            return chunk.render(bodies.block, context).end();
          });
        };
        if (params.listen) {
          ServerEvents.once(params.listen, handler);
        } else {
          handler({});
        }
      } else {
        handler = function(data) {
          context = context.push(data);
          return chunk.render(bodies.block, context).end();
        };
        if (params.listen) {
          ServerEvents.once(params.listen, handler);
        } else {
          handler({});
        }
      }
      if (params.emit) return ServerEvents.emit(params.emit);
    });
  }
});

Controller = (function(_super) {

  __extends(Controller, _super);

  function Controller(uuid, template, ServerEvents, LocalEvents) {
    this.uuid = uuid;
    this.template = template;
    this.ServerEvents = ServerEvents;
    this.LocalEvents = LocalEvents;
    this.el = $("[data-controller-id=" + this.uuid + "]");
  }

  Controller.prototype.bindings = {};

  Controller.prototype.events = {};

  Controller.prototype.bind = function() {
    var ev, event, handler, selector, _ref, _ref1, _results;
    _ref = this.events;
    _results = [];
    for (event in _ref) {
      handler = _ref[event];
      _ref1 = event.split(' '), ev = _ref1[0], selector = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      selector = selector.join(' ');
      this.el.undelegate(selector, event);
      _results.push(this.el.delegate(selector, event, _(this[handler]).bind(this)));
    }
    return _results;
  };

  Controller.prototype.render = function() {
    var err, html, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    require(["views/" + template], __iced_deferrals.defer({
      lineno: 61
    }));
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      parent: ___iced_passed_deferral,
      filename: "src/index.iced",
      funcname: "Controller.render"
    });
    dust.render(template, this.data, __iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          err = arguments[0];
          return html = arguments[1];
        };
      })(),
      lineno: 64
    }));
    __iced_deferrals._fulfill();
  };

  return Controller;

})(EventEmitter2);

module.exports = {
  Controller: Controller,
  Base: Base
};
